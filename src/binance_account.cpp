#include "binance.h"

using namespace binance;
using namespace std;

binanceError_t binance::Account::getInfo(string& result, const vector<pair<string, string> >& args,
	const vector<pair<string, string> >& headers)
{
	return binanceSuccess;
}

// Get current account information. (SIGNED)
//
// GET /api/v3/account
//
// Parameters:
// Name		Type	Mandatory	Description
// recvWindow	LONG	NO	
// timestamp	LONG	YES
//
binanceError_t binance::Account::getInfo(std::string& result, long recvWindow) 
{
	return binanceSuccess;
}

binanceError_t binance::Account::getAllOrders(string& result, const vector<pair<string, string> >& args,
	const vector<pair<string, string> >& headers)
{
	return binanceSuccess;
}

// All Orders (SIGNED)
//
// GET /api/v3/allOrders
//
// Name		Type	Mandatory	Description
// symbol		STRING	YES	
// orderId		LONG	NO	
// limit		INT		NO		Default 500; max 500.
// recvWindow	LONG	NO	
// timestamp	LONG	YES	
//
binanceError_t binance::Account::getAllOrders(std::string& result, const char *symbol,
	long orderId, int limit, long recvWindow) 
{
	return binanceSuccess;
}

binanceError_t binance::Account::getHistoricalTrades(string& result, const vector<pair<string, string> >& args,
	const vector<pair<string, string> >& headers)
{
	return binanceSuccess;
}

// Old trade lookup (MARKET_DATA)
//
// GET /api/v1/historicalTrades
//
// Name	Type	Mandatory	Description
// symbol	STRING	YES	
// limit	INT	NO	Default 500; max 500.
// fromId	LONG	NO	TradeId to fetch from. Default gets most recent trades.
//
binanceError_t binance::Account::getHistoricalTrades(std::string& result, const char *symbol, long fromId, int limit)
{
	return binanceSuccess;
}

binanceError_t binance::Account::getTrades(string& result, const vector<pair<string, string> >& args,
	const vector<pair<string, string> >& headers)
{
	return binanceSuccess;
}

// Recent trades list
//
// GET /api/v1/trades
// Get recent trades (up to last 500).
//
// Name	Type	Mandatory	Description
// symbol	STRING	YES	
// limit	INT	NO	Default 500; max 500.
//
binanceError_t binance::Account::getTrades(std::string& result, const char *symbol, int limit)
{
	return binanceSuccess;
}

// Get trades for a specific account and symbol. (SIGNED)
//
// GET /api/v3/myTrades
// Name		Type	Mandatory	Description
// symbol		STRING	YES	
// limit		INT		NO	Default 500; max 500.
// fromId		LONG	NO	TradeId to fetch from. Default gets most recent trades.
// recvWindow	LONG	NO	
// timestamp	LONG	YES
//
binanceError_t binance::Account::getTradesSigned(std::string& result, const char *symbol, long fromId, long recvWindow, int limit)
{
	return binanceSuccess;
}

binanceError_t binance::Account::getOpenOrders(string& result, const vector<pair<string, string> >& args,
	const vector<pair<string, string> >& headers)
{
	return binanceSuccess;
}

// Open Orders (SIGNED)
//
// GET /api/v3/openOrders
//
// Name		Type	Mandatory	Description
// symbol		STRING	YES	
// recvWindow	LONG	NO	
// timestamp	LONG	YES	
//
binanceError_t binance::Account::getOpenOrders(std::string& result, long recvWindow) 
{
	return binanceSuccess;
}

// Open Orders (SIGNED)
//
// GET /api/v3/openOrders
//
// Name		Type	Mandatory	Description
// symbol		STRING	YES	
// recvWindow	LONG	NO	
// timestamp	LONG	YES	
//
binanceError_t binance::Account::getOpenOrders(std::string& result, const char *symbol, long recvWindow) 
{
	return binanceSuccess;
}

binanceError_t binance::Account::sendOrder(string& result, const vector<pair<string, string> >& args,
	const vector<pair<string, string> >& headers)
{
	return binanceSuccess;
}

// Send order (SIGNED)
//
// POST /api/v3/order
//
// Name				Type		Mandatory	Description
// symbol				STRING		YES	
// side				ENUM		YES	
// type				ENUM		YES	
// timeInForce			ENUM		YES	
// quantity			DECIMAL		YES	
// price				DECIMAL		YES	
// newClientOrderId		STRING		NO		A unique id for the order. Automatically generated by default.
// stopPrice			DECIMAL		NO		Used with STOP orders
// icebergQty			DECIMAL		NO		Used with icebergOrders
// recvWindow			LONG		NO	
// timestamp			LONG		YES	
//
binanceError_t binance::Account::sendOrder(std::string& result, const char *symbol,
	const char *side, const char *type, const char *timeInForce, double quantity, double price,
	const char *newClientOrderId, double stopPrice, double icebergQty, long recvWindow) 
{
	return binanceSuccess;
}

binanceError_t binance::Account::startUserDataStream(string& result, const vector<pair<string, string> >& headers)
{
	return binanceSuccess;
}

